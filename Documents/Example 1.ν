`/ thouts about Î½ language

`/ general
{
	`/ my line comment
	`\ my block comment \`
	my-namespace: new interface {
		my-class: new interface {
			factory my-prototype: interface {
			};
		};
		my-operator: operator none body {
			my-variable: new my-class;
		};
	};
}


`/ objects with same interface
{
	my-interface: interface {
		a: new A;
		b: new B;
	};
	
	my-instance-1: new my-interface;
	my-instance-2: new my-interface;
}


`/ thouts about instancing
{
	`/ operator argument should be an instance, not just interface
	I: interface {};
	operator none right group (new I); `/ error, "I" is not an instance
	J: new interface {};
	operator none right group (new J); `/ OK
}


`/ "function"
{
	`/ function none my-function(int x)
	my-function: new interface {
		operator none right group (x: new int) body {
		};
	};
}


`/ instanceable entites overview
{
	`/ "Instanceable" - is an entity, which can produce other entites.
	`/ E.g., interface is instanceable:
	x: new interface {}
	`/ Moreover, several entities may be produced using a single instanceable entity.
	i: interface {};
	x: new i; `/ have same instanceable
	y: new i; `/ have same instanceable
	`/ Any entity may be instanceable. To do so, entity interface should have "factory" section.
	`/ Entity, which will be created via this kind of interface, may be used as argument for operator "new" too:
	i: interface {
		`/ the following section lets opportunities to use instance of this interface as argument for "new" operator
		factory interface {};
	};
	x: new i; `/ create instance of instanceable "i"
	a: new x; `/ create instance of instanceable "x"
	`/ TODO
	i: interface { factory interface {}; };
	x: new i;
	y: new i;
	a: new x;
	b: new y; `/ even if "b" have the same interface as "a", instanceable of "b" ("y") is different from "a" ("x")
}






























